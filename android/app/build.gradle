def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

project.ext.envConfigFiles = [
        widget: ".env.develop",
        dev: ".env.develop",
        uat: ".env.uat",
        prod: ".env.production"
]

apply from: project(':flutter_config').projectDir.getPath() + "/dotenv.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.existing.flutter.falconx"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion 19
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }
    signingConfigs {
        debug {
            def alias = System.getenv("SIGNING_KEY_ALIAS")
            def pass = System.getenv("SIGNING_PASSWORD")

            if(alias != null && pass != null){
                // Build with git action.
                def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
                def allFilesFromDir = new File(tmpFilePath).listFiles()
                def keystoreFile = allFilesFromDir.first()
                storeFile keystoreFile
                keyAlias alias
                storePassword pass
                keyPassword pass
            } else{
                // Build with locale.
                storeFile file(localProperties.getProperty('KEYSTORE_FILE_DEBUG'))
                keyAlias localProperties.getProperty('KEYSTORE_ALIAS_DEBUG')
                storePassword localProperties.getProperty('KEYSTORE_PASSWORD_DEBUG')
                keyPassword localProperties.getProperty('KEYSTORE_PASSWORD_DEBUG')
            }
        }

        release {
            def alias = System.getenv("SIGNING_KEY_ALIAS")
            def pass = System.getenv("SIGNING_PASSWORD")

            if(alias != null && pass != null){
                // Build with git action.
                def tmpFilePath = System.getProperty("user.home") + "/work/_temp/keystore/"
                def allFilesFromDir = new File(tmpFilePath).listFiles()
                def keystoreFile = allFilesFromDir.first()
                storeFile keystoreFile
                keyAlias alias
                storePassword pass
                keyPassword pass
            } else{
                // Build with locale.
                storeFile file(localProperties.getProperty('KEYSTORE_FILE'))
                keyAlias localProperties.getProperty('KEYSTORE_ALIAS')
                storePassword localProperties.getProperty('KEYSTORE_PASSWORD')
                keyPassword localProperties.getProperty('KEYSTORE_PASSWORD')
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            // useProguard true
            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-debug-rules.pro'
        }

        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }

    flavorDimensions "default"
    productFlavors {
        widget {
            applicationIdSuffix ".widget"
        }
        dev {
            applicationIdSuffix ".dev"
        }
        uat {
            applicationIdSuffix ".uat"
        }
        prod {
        }
    }



}

flutter {
    source '../..'
}

dependencies {
    implementation 'com.android.support:multidex:2.0.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.android.material:material:1.6.1'
}
